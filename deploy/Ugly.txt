<!DOCTYPE html>
<html>
<head>
    <title>Backlog Ready Depth</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Mar 16 2017 08:55:51 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Mar 16 2017 08:55:51 GMT-0600 (MDT)";
        var STORY    = "F219";
        var BUILDER  = "corkr03";
        var CHECKSUM = 10312274500;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) 
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->
    
    
    <script type="text/javascript">
        Rally.onReady(function() {
            Ext.define("Rally.technicalservices.InfoLink",{extend:"Rally.ui.dialog.Dialog",alias:"widget.tsinfolink",informationHtml:null,title:"Build Information",defaults:{padding:5,margin:5},closable:!0,draggable:!0,autoShow:!0,width:350,informationalConfig:null,items:[{xtype:"container",itemId:"information"}],initComponent:function(){Ext.id(this);this.title="<span class='icon-help'> </span>"+this.title,this.callParent(arguments)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/var BUILDER  = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=Ext.create("Deft.Deferred"),c=this;return Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){if(text=a.responseText,CHECKSUM){var d=c._generateChecksum(text);if(CHECKSUM!==d)return void b.resolve(!1)}b.resolve(!0)}}),b.promise},_addToContainer:function(a){var b=Ext.apply({xtype:"container",height:200,overflowY:!0},this.informationalConfig);a.add(b)},afterRender:function(){var a=Rally.getApp();if(!Ext.isEmpty(this.informationalConfig)){var b=this.down("#information");this._addToContainer(b)}a.isExternal()?this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"... Running externally"}):this._checkChecksum(a).then({scope:this,success:function(a){a||this.addDocked({xtype:"container",cls:"build-info",dock:"bottom",padding:2,html:'<span class="icon-warning"> </span>Checksums do not match'})},failure:function(a){console.log("oops:",a)}}),this.callParent(arguments)},beforeRender:function(){if(this.callParent(arguments),this.informationHtml&&this.addDocked({xtype:"component",componentCls:"intro-panel",padding:2,html:this.informationHtml,doc:"top"}),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"This app was created by the CA AC Technical Services Team."}),APP_BUILD_DATE){var a=Ext.String.format("Built on: {0} <br/>Built by: {1}",APP_BUILD_DATE,BUILDER);STORY&&(a=a+"<br/>Source story: "+STORY),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:a})}}}),Ext.define("Rally.technicalservices.Logger",{constructor:function(a){Ext.apply(this,a)},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),window.console&&console.log.apply(console,c)}}),Ext.define("RallyTechServices.backlogreadydepth.utils.BacklogDepthCalculator",{constructor:function(a){this.iterationData=a.iterationData,this.numSprintsToTrend=a.numSprintsToTrend,this.numSprintsForAverageVelocity=a.numSprintsForAverageVelocity,this.projects=a.projects,this.futureIterations=a.futureIterations||[],this._calculateVelocity(a.velocityData,this.iterationData),this._aggregateBacklogSnaps(a.backlogData,this.iterationData)},getChartData:function(){for(var a=[],b=this.numSprintsForAverageVelocity;b<this.iterationData.length;b++)a.push({name:this.iterationData[b].Name,data:this._getBacklogDepthData(b)});return{series:a,categories:this.getCategories()}},_getBacklogDepthData:function(a){var b=[];return Ext.Array.each(this.projects,function(c){b.push(this._calculateBacklogDepth(c,a))},this),b},_calculateBacklogDepth:function(a,b){var c=a.get("ObjectID"),d=Ext.Array.clone(this.futureIterations);console.log("projects",c,a.get("Name"),this.iterationData[b]);for(var e=b;e<this.iterationData.length;e++)this.iterationData[e]._iterationOids||(this.iterationData[e]._iterationOids=Ext.Array.map(this.iterationData[e]._iterations,function(a){return a.ObjectID})),d=d.concat(this.iterationData[e]._iterationOids);for(var f=0,g=[],h=this.iterationData[b]._snaps,e=0;e<h.length;e++){var i=h[e].getData();console.log("snap",i),!Ext.Array.contains(i._ProjectHierarchy,c)||i.Iteration&&!Ext.Array.contains(d,i.Iteration)||(f+=i.PlanEstimate||0,g.push(i.Project))}g=Ext.Array.unique(g),console.log("projects",g,f);for(var j={},k=b-this.numSprintsForAverageVelocity,e=k;b>e;e++)for(var l=this.iterationData[e],m=0;m<g.length;m++){var n=g[m];console.log("proj",n,l,e,b,this.numSprintsForAverageVelocity,k),j[n]||(j[n]=[]),j[n].push(l._projectVelocity[n])}if(console.log("projectVelocities",c,j),g.length>0){var o=j[c],p=Ext.Array.mean(o);if(p>0){var q=Math.round(f/p*100);return q/100}}return 0},_aggregateBacklogSnaps:function(a,b){console.log("_aggregateBacklogSnaps",a);for(var c=b.length-this.numSprintsForAverageVelocity,d=0;c>d;d++)b[d+this.numSprintsForAverageVelocity]._snaps=a[d],console.log("_aggregateBacklogSnaps",b[d+this.numSprintsForAverageVelocity],a[d])},_calculateVelocity:function(a,b){var c={};Ext.Array.each(a,function(a){var b=a.get("Iteration").ObjectID.toString();c[b]||(c[b]=0),c[b]+=a.get("PlanEstimate")||0}),console.log("velocity",c),Ext.Array.each(b,function(a){var b={};Ext.Array.each(a._iterations,function(a){var d=a.ObjectID,e=a.Project.ObjectID;console.log("i",a.ObjectID,c,c[d],d),b[e]=c[d]||null}),a._projectVelocity=b,console.log("projectVelocities",b)}),console.log("iteationdata",b)},getCategories:function(){return Ext.Array.map(this.projects,function(a){return a.get("Name")})},getPlotBands:function(a){return[{from:a.outerThreshold[0],to:a.innerThreshold[0],color:a.outerColor},{from:a.innerThreshold[0],to:a.innerThreshold[1],color:a.innerColor},{from:a.innerThreshold[1],to:a.outerThreshold[1],color:a.outerColor}]}}),Ext.define("RallyTechServices.backlogreadydepth.utils.Toolbox",{singleton:!0,fetchWsapiRecords:function(a,b){var c=Ext.create("Deft.Deferred");return b||(b="Rally.data.wsapi.Store"),a.limit||(a.limit="Infinity"),a.pageSize||(a.pageSize=2e3),Ext.create(b,a).load({callback:function(a,b){b.wasSuccessful()?c.resolve(a):c.reject("Error fetching from store for: "+b.error.errors.join(","))}}),c.promise},fetchWsapiArtifactRecords:function(a){return RallyTechServices.backlogreadydepth.utils.Toolbox.fetchWsapiRecords(a,"Rally.data.wsapi.artifact.Store")},fetchLookbackSnapshots:function(a){var b=Ext.create("Deft.Deferred");return a.removeUnauthorizedSnapshots=!0,a.limit||(a.limit=1/0),Ext.create("Rally.data.lookback.SnapshotStore",a).load({callback:function(a,c){c.wasSuccessful()?b.resolve(a):b.reject("Error loading snapshots: "+c.error.errors.join(","))}}),b},getHighchartsColorWithOpacity:function(a,b){var c=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);return c?Ext.String.format("rgba({0},{1},{2},{3})",parseInt(c[1],16),parseInt(c[2],16),parseInt(c[3],16),b):null}}),Ext.define("backlog-ready-depth",{extend:"Rally.app.App",componentCls:"app",logger:new Rally.technicalservices.Logger,defaults:{margin:10},items:[{xtype:"container",itemId:"message_box",tpl:"Hello, <tpl>{_refObjectName}</tpl>"},{xtype:"container",itemId:"display_box"}],integrationHeaders:{name:"backlog-ready-depth"},config:{defaultSettings:{numSprintsForAverageVelocity:3,numSprintsToTrend:2,innerThreshold:[1,2],outerThreshold:[.5,3],innerColor:"#e3f9e9",outerColor:"#FDFECC",outsideColor:"#F2D3D0",query:"",workItemTypes:["HierarchicalRequirement","Defect"],relativeProjectDepth:1}},chartColors:[Rally.util.Colors.cyan,Rally.util.Colors.orange,Rally.util.Colors.green,Rally.util.Colors.purple,Rally.util.Colors.lime,Rally.util.Colors.red_med,Rally.util.Colors.pink_med],lookbackBacklogFilter:{ScheduleState:"Defined",Ready:!0,Blocked:!1},lookbackBacklogFetch:["Project","Iteration","ObjectID","_ProjectHierarchy","PlanEstimate"],velocityFetch:["Project","ObjectID","Iteration","PlanEstimate"],launch:function(){this.updateView()},updateView:function(){this.fetchIterationInfo().then({success:this.fetchAllIterations,failure:this.showErrorNotification,scope:this}).then({success:this.fetchProjectBuckets,failure:this.showErrorNotification,scope:this}).then({success:this.fetchWorkItemData,failure:this.showErrorNotification,scope:this}).then({success:this.buildChart,failure:this.showErrorNotification,scope:this})},fetchWorkItemData:function(a){this.projects=a,this.logger.log("fetchWorkItemData",a,this.iterationData);for(var b=[],c=this.getNumSprintsForAverageVelocity();c<this.iterationData.length;c++)b.push(this.fetchIterationBoundarySnapshots(this.iterationData[c]));return b.push(this.fetchCurrentVelocityData()),Deft.Promise.all(b)},fetchIterationBoundarySnapshots:function(a){var b=0,c=Rally.util.DateTime.add(a.StartDate,"day",b),d=Ext.clone(this.lookbackBacklogFilter);return d.__At=Rally.util.DateTime.toIsoString(c),d._ProjectHierarchy=this.getContext().getProject().ObjectID,this.logger.log("fetchIterationBoundarySnapshots",d,a),RallyTechServices.backlogreadydepth.utils.Toolbox.fetchLookbackSnapshots({findConfig:d,fetch:this.lookbackBacklogFetch})},fetchCurrentVelocityData:function(){return RallyTechServices.backlogreadydepth.utils.Toolbox.fetchWsapiArtifactRecords({models:this.getWorkItemTypes(),fetch:this.velocityFetch,filters:this.getVelocityFilters()})},getVelocityFilters:function(){return[{property:"Iteration.StartDate",operator:">=",value:Rally.util.DateTime.toIsoString(this.iterationData[0].StartDate)},{property:"Iteration.EndDate",operator:"<=",value:Rally.util.DateTime.toIsoString(new Date)},{property:"ScheduleState",operator:">=",value:"Accepted"}]},fetchProjectBuckets:function(a){this.logger.log("fetchProjectBuckets",a),this.addIterationsToIterationData(a);for(var b=["ObjectID"],c=0;c<this.getRelativeProjectDepth();c++)b.unshift("Parent");var d=b.join(".");return RallyTechServices.backlogreadydepth.utils.Toolbox.fetchWsapiRecords({model:"Project",fetch:["Name","ObjectID","Parent"],filters:[{property:d,value:this.getContext().getProject().ObjectID},{property:"State",value:"Open"}],sorters:[{property:"Name",direction:"ASC"}]})},fetchIterationInfo:function(){return RallyTechServices.backlogreadydepth.utils.Toolbox.fetchWsapiRecords({model:"Iteration",fetch:["Name","StartDate","EndDate"],pageSize:this.getNumSprintsToTrend()+this.getNumSprintsForAverageVelocity(),limit:this.getNumSprintsToTrend()+this.getNumSprintsForAverageVelocity(),context:{project:this.getContext().getProject()._ref,projectScopeDown:!1,projectScopeUp:!1},filters:[{property:"StartDate",operator:"<",value:Rally.util.DateTime.toIsoString(new Date)}],sorters:[{property:"StartDate",direction:"DESC"}]})},fetchAllIterations:function(a){if(!a||0==a.length)return this.addAppMessage("No iterations defined for the currently scoped project."),null;var b=[];Ext.Array.each(a,function(a){var c={StartDate:a.get("StartDate"),EndDate:a.get("EndDate"),Name:a.get("Name"),_iterations:[]};b.push(c)},this,!0),this.iterationData=b;var c=b[0].StartDate;return RallyTechServices.backlogreadydepth.utils.Toolbox.fetchWsapiRecords({model:"Iteration",fetch:["Name","StartDate","EndDate","Project","ObjectID"],filters:[{property:"StartDate",operator:">=",value:c}],sorters:[{property:"StartDate",direction:"DESC"}]})},addIterationsToIterationData:function(a){var b=new Date,c=[];this.logger.log("addIterationsToIterationData iterations found:",a.length);for(var d=0;d<this.iterationData.length;d++)for(var e=this.iterationData[d],f=a.length-1;f>=0;f--)a[f].get("StartDate")>b?(c.push(a[f].get("ObjectID")),a.splice(f,1)):a[f].get("Name")===e.Name&&(e._iterations.push(a[f].getData()),a.splice(f,1));this.futureIterations=c,this.logger.log("addIterationsToIterationData",this.iterationData,a,c)},addAppMessage:function(a){this.add({xtype:"container",html:a})},buildChart:function(a){if(this.logger.log("processData",a),a){var b=Ext.create("RallyTechServices.backlogreadydepth.utils.BacklogDepthCalculator",{iterationData:this.iterationData,projects:this.projects,velocityData:a.slice(-1)[0],backlogData:a.slice(0,a.length-1),numSprintsForAverageVelocity:this.getNumSprintsForAverageVelocity(),numSprintsToTrend:this.getNumSprintsToTrend(),relativeProjectDepth:this.getRelativeProjectDepth(),futureIterations:this.futureIterations});this.add({xtype:"rallychart",chartColors:this.chartColors,chartConfig:{chart:{type:"bar",plotBackgroundColor:this.getSetting("outsideColor")},title:{text:'"Ready" Backlog Depth',style:{color:"#666",fontSize:"18px",fontFamily:"ProximaNova",textTransform:"uppercase",fill:"#666"}},subtitle:{text:null},xAxis:{title:{text:null,style:{color:"#444",fontFamily:"ProximaNova",textTransform:"uppercase",fill:"#444"}},labels:{style:{color:"#444",fontFamily:"ProximaNova",fill:"#444"}}},yAxis:{min:0,title:{text:"Number of Sprints",style:{color:"#444",fontFamily:"ProximaNova",textTransform:"uppercase",fill:"#444"}},labels:{overflow:"justify",style:{color:"#444",fontFamily:"ProximaNova",fill:"#444"}},plotBands:b.getPlotBands(this.getSettings())},tooltip:{valueSuffix:" sprints",backgroundColor:"#444",useHTML:!0,borderColor:"#444",style:{color:"#FFF",fontFamily:"ProximaNova",fill:"#444"}},plotOptions:{bar:{dataLabels:{enabled:!1},borderWidth:0}},legend:{itemStyle:{color:"#444",fontFamily:"ProximaNova",textTransform:"uppercase"},borderWidth:0}},chartData:b.getChartData()})}},getNumSprintsForAverageVelocity:function(){return this.getSetting("numSprintsForAverageVelocity")||3},getNumSprintsToTrend:function(){return this.getSetting("numSprintsToTrend")||2},getWorkItemTypes:function(){return this.getSetting("workItemTypes")||["HierarchicalRequirement","Defect"]},getRelativeProjectDepth:function(){return this.getSetting("relativeProjectDepth")||2},showErrorNotification:function(a){Rally.ui.notify.Notifier.showError({message:a})},getSettingsFields:function(){var a={labelAlign:"right",labelWidth:100},b=Ext.Object.merge({xtype:"rallynumberfield",fieldLabel:"# Sprints to Trend",name:"numSprintsToTrend",maxValue:6,minValue:1},a);return[b]},getOptions:function(){return[{text:"About...",handler:this._launchInfo,scope:this}]},_launchInfo:function(){this.about_dialog&&this.about_dialog.destroy(),this.about_dialog=Ext.create("Rally.technicalservices.InfoLink",{})},isExternal:function(){return"undefined"==typeof this.getAppId()}});
            
               Rally.launchApp('backlog-ready-depth', {
                   name: 'Backlog Ready Depth'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>